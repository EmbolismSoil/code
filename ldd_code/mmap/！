#include <linux/module.h>
#include <linux/init.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/highmem.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/gfp.h>
#include <linux/mm_types.h>
#include <linux/mm.h>


static cdev *pcdev;
static dev_t ndev;
static struct page *pg;/*define a class which describe the physpg*/
static struct timer_list timer;
unsigned long phys_addr = 0; 

/*
 @fuction : timer_hanlder printk the data by string in 1s
*/
static void  timer_hanlder(unsigned long data)
{
	printk("timer_hanlder:%s\n", (char*)data);
	timer.expires = jiffies + 2*HZ;
	add_timer(&timer);
}
/*
 @function : send the address which alloc by alloc_page()
*/
static ssize_t mem_read(struct file *filp, char  __user *buf,
									size_t size, loff_t  *ppos)
{
	copy_to_user(buf, (void *)phys_addr, sizeof(unsigned long));
	return sizeof(unsigned long);
}

static mem_open(struct inode *inodep, struct file *filep)
{
	return 0;
}

static int mem_mmap(struct file *filp, struct vm_area_struct *vma)
{
	int err = 0;
	err = remap_pfn_range(vma, vma->vm_start, vma->vm_pgoff,
	            vma->vm_end - vma->vm_start,vma-vm_page_prot);
	
	return err;
}

static struct file_operations fops = 
{
	.owner = THIS_MODULE,
	.open = mem_open,
	.read = mem_read,
}

int mmap_init(void)
{
	int err = 0;
	void *kernel_vir;
	/*分配设备号并且注册设备号到系统*/
	alloc_chrdev_region(&ndev, 0, 1, "memap_dev");
	
	pcdev = cdev_alloc();
	pcdev->owner = THIS_MODULE；
	cdev_init(pcdev, fops);
	cdev_add(pcdev, ndev, 1);
	
	/*从高端物理空间分配物理页*/
	pg = alloc_pages(GFP_HIGHUSER, 0);
	phys_addr = page_to_phys(pg);
	SetPageReserved(pg);
	kernel_vir = kmap(pg);

    /*设置定时器*/
    init_timer(&timer);
    timer.fuction = timer_hanlder;
    timer.date = (unsigned long )kernel_vir;
	timer.expires = jiffies + HZ*2;
	add_timer(&timer);
	
	return err;
}

int mmap_exit(void)
{
	del_tmer_sync(&timer);
	cdev_del(pcdev);
	unregister_chrdev_region(ndev,1);
	
	kunmap(pg);
	ClearPageReserved(pg);
	
	__free_pages(pg,0);
	
	return 0;
}

module_init(mmap_init);
module_exit(mmap_exit);

MODULE_AUTHOR("LK");
MODULE_LICENSE("GPL");
